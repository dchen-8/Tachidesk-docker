name: Manual Build Tag Images

on:
  workflow_dispatch:
     inputs:
        build_tachidesk_tag:
          required: true
          default: 'v0.0.0'
          description: 'Build Docker Images of this tag'
        build_alpine_image:
          required: false
          default: 'no'
          description: 'build alpine version also'
          

env:
  build_owner_docker: 'arbuild'
  build_repo_docker: 'tachidesk-docker'
  startup_script_url: 'https://raw.githubusercontent.com/arbuilder/Tachidesk-docker/main/startup_script.sh'
  build_base_image: 'openjdk:latest'
  build_base_image_platform: 'linux/amd64,linux/arm64/v8'
  build_base_image_alpine: 'alpine:latest'
  build_base_image_alpine_platform: 'linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x'
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
          path: main
          fetch-depth: 0
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: get release metadata
        id: get_release_metadata
        run: |
          cd main
          latest_tag=$(curl -s https://api.github.com/repos/Suwayomi/Tachidesk/releases/latest | egrep -o "tag_name.*.v[0-9]+.[0-9]+.[0-9]+" | egrep -o "v[0-9]+.[0-9]+.[0-9]+")
          if [[ ${{ github.event.inputs.build_tachidesk_tag }} == $latest_tag ]]; then
              release_url=$(curl -s https://api.github.com/repos/Suwayomi/Tachidesk/releases/latest | egrep -o "https://.*.download/$latest_tag/Tachidesk-$latest_tag-r[0-9]+.jar")
              echo "::set-output name=is_latest::true"
          else
              release_url=$(curl -s https://api.github.com/repos/Suwayomi/Tachidesk/releases | egrep -o "https://.*./download/${{ github.event.inputs.build_tachidesk_tag }}/Tachidesk-${{ github.event.inputs.build_tachidesk_tag }}-r[0-9]+.jar")
              echo "::set-output name=is_latest::false"
          fi
          if [[ $release_url != "" ]]; then
              release_var=$(echo $release_url | grep -o "Tachidesk-.*.jar" | sed -e's/Tachidesk-\|.jar//g')
              release_commit=$(echo $release_var | cut -f2 -d"r")
              release_tag=$(echo $release_var | cut -f1 -d"-")
              release_filename=Tachidesk-${release_var}.jar
              release_version=$(echo $release_tag | cut -c2-)
              echo "::set-output name=release_url::$release_url"
              echo "::set-output name=release_commit::$release_commit"
              echo "::set-output name=release_tag::$release_tag"
              echo "::set-output name=release_filename::$release_filename"
              echo "::set-output name=release_version::$release_version"
              echo "::set-output name=release_var::$release_var"
              tachidesk_docker_git_commit=$(git rev-list --count HEAD)
              echo "::set-output name=tachidesk_docker_git_commit::$tachidesk_docker_git_commit"
              build_date=$(date "+%F")
              echo "::set-output name=build_date::$build_date"
              echo "::set-output name=check_meta_pass::true"
          else
              echo "version info wrong"
              echo "::set-output name=check_meta_pass::false"
          fi
          
      - name: Build and push tag
        if: steps.get_release_metadata.outputs.check_meta_pass == 'true' && steps.get_release_metadata.outputs.is_latest == 'false'
        id: docker_build_tag
        uses: docker/build-push-action@v2
        with:
          file: scripts/dockerfiles/Git_Actions-Dockerfile
          platforms: ${{ env.build_base_image_platform }}
          push: true
          build-args: |
            BASE_IMAGE=${{ env.build_base_image }}
            BUILD_DATE=${{ steps.get_release_metadata.outputs.build_date }}
            IMAGE_VERSION=${{ steps.get_release_metadata.outputs.release_version }}
            IMAGE_TYPE=stable
            TACHIDESK_GIT_COMMIT=${{ steps.get_release_metadata.outputs.release_commit }}
            TACHIDESK_RELEASE_TAG=${{ github.event.inputs.build_tachidesk_tag }}
            TACHIDESK_RELEASE_DOWNLOAD_URL=${{ steps.get_release_metadata.outputs.release_url }}
            TACHIDESK_FILENAME=${{ steps.get_release_metadata.outputs.release_filename }}
            STARTUP_SCRIPT_URL=${{ env.startup_script_url }}
            TACHIDESK_DOCKER_GIT_COMMIT=${{ steps.get_release_metadata.outputs.tachidesk_docker_git_commit }}
          tags: |
            ${{ env.build_owner_docker }}/${{ env.build_repo_docker }}:${{ github.event.inputs.build_tachidesk_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push tag alpine
        if: steps.get_release_metadata.outputs.check_meta_pass == 'true' && github.event.inputs.build_alpine_image == 'true' && steps.get_release_metadata.outputs.is_latest == 'false'
        id: docker_build_tag_alpine
        uses: docker/build-push-action@v2
        with:
          file: scripts/dockerfiles/Git_Actions-Dockerfile
          platforms: ${{ env.build_base_image_alpine_platform }}
          push: true
          build-args: |
            BASE_IMAGE=${{ env.build_base_image_alpine }}
            BUILD_DATE=${{ steps.get_release_metadata.outputs.build_date }}
            IMAGE_VERSION=${{ steps.get_release_metadata.outputs.release_version }}
            IMAGE_TYPE=stable-alpine
            TACHIDESK_GIT_COMMIT=${{ steps.get_release_metadata.outputs.release_commit }}
            TACHIDESK_RELEASE_TAG=${{ github.event.inputs.build_tachidesk_tag }}
            TACHIDESK_RELEASE_DOWNLOAD_URL=${{ steps.get_release_metadata.outputs.release_url }}
            TACHIDESK_FILENAME=${{ steps.get_release_metadata.outputs.release_filename }}
            STARTUP_SCRIPT_URL=${{ env.startup_script_url }}
            TACHIDESK_DOCKER_GIT_COMMIT=${{ steps.get_release_metadata.outputs.tachidesk_docker_git_commit }}
          tags: |
            ${{ env.build_owner_docker }}/${{ env.build_repo_docker }}:${{ github.event.inputs.build_tachidesk_tag }}-slim
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push tag latest
        if: steps.get_release_metadata.outputs.check_meta_pass == 'true' && steps.get_release_metadata.outputs.is_latest == 'true'
        id: docker_build_tag_latest
        uses: docker/build-push-action@v2
        with:
          file: scripts/dockerfiles/Git_Actions-Dockerfile
          platforms: ${{ env.build_base_image_platform }}
          push: true
          build-args: |
            BASE_IMAGE=${{ env.build_base_image }}
            BUILD_DATE=${{ steps.get_release_metadata.outputs.build_date }}
            IMAGE_VERSION=${{ steps.get_release_metadata.outputs.release_version }}
            IMAGE_TYPE=stable
            TACHIDESK_GIT_COMMIT=${{ steps.get_release_metadata.outputs.release_commit }}
            TACHIDESK_RELEASE_TAG=${{ github.event.inputs.build_tachidesk_tag }}
            TACHIDESK_RELEASE_DOWNLOAD_URL=${{ steps.get_release_metadata.outputs.release_url }}
            TACHIDESK_FILENAME=${{ steps.get_release_metadata.outputs.release_filename }}
            STARTUP_SCRIPT_URL=${{ env.startup_script_url }}
            TACHIDESK_DOCKER_GIT_COMMIT=${{ steps.get_release_metadata.outputs.tachidesk_docker_git_commit }}
          tags: |
            ${{ env.build_owner_docker }}/${{ env.build_repo_docker }}
            ${{ env.build_owner_docker }}/${{ env.build_repo_docker }}:${{ steps.get_release_metadata.outputs.release_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push tag latest alpine
        if: steps.get_release_metadata.outputs.check_meta_pass == 'true' && steps.get_release_metadata.outputs.is_latest == 'true'
        id: docker_build_tag_alpine_latest
        uses: docker/build-push-action@v2
        with:
          file: scripts/dockerfiles/Git_Actions-Dockerfile
          platforms: ${{ env.build_base_image_alpine_platform }}
          push: true
          build-args: |
            BASE_IMAGE=${{ env.build_base_image_alpine }}
            BUILD_DATE=${{ steps.get_release_metadata.outputs.build_date }}
            IMAGE_VERSION=${{ steps.get_release_metadata.outputs.release_version }}
            IMAGE_TYPE=stable-alpine
            TACHIDESK_GIT_COMMIT=${{ steps.get_release_metadata.outputs.release_commit }}
            TACHIDESK_RELEASE_TAG=${{ github.event.inputs.build_tachidesk_tag }}
            TACHIDESK_RELEASE_DOWNLOAD_URL=${{ steps.get_release_metadata.outputs.release_url }}
            TACHIDESK_FILENAME=${{ steps.get_release_metadata.outputs.release_filename }}
            STARTUP_SCRIPT_URL=${{ env.startup_script_url }}
            TACHIDESK_DOCKER_GIT_COMMIT=${{ steps.get_release_metadata.outputs.tachidesk_docker_git_commit }}
          tags: |
            ${{ env.build_owner_docker }}/${{ env.build_repo_docker }}:slim
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache